@page "/"
@inject IJSRuntime JS
@implements IAsyncDisposable
@using ProcessImageWithOpenLayer.Data
@using ProcessImageWithOpenLayer.Serivce
@using ProcessImageWithOpenLayer.Response
@using System.Text.Json
@inject IWebHostEnvironment environment
@inject ILocationService locationSvc

<link rel="stylesheet" href="./css/openlayer/ol.css" />
<link rel="stylesheet" href="./css/fontawesome/css/fontawesome.css" />
<link rel="stylesheet" href="./css/fontawesome/css/solid.css" />
<style>
    .map {
        width: 100%;
        height: 1040px;
        border-style: solid;
        border-width: 1px;
        margin-top: 5px;
    }

    .select-draw {
        top: 65px;
        left: .5em;
    }

    .select-draw .select-draw-select {
        border-radius: 2px 2px 0 0;
    }

    .select-draw .select-draw-draw {
        border-radius: 0 0 0 0;
    }

    .select-draw .select-draw-cut {
        border-radius: 0 0 0 0;
    }

    .select-draw .select-draw-save {
        border-radius: 0 0 2px 2px;
    }
</style>

<DxFormLayout CssClass="w-100">
    <DxFormLayoutItem Caption="Red:">
        <DxSpinEdit @bind-Value="@red" Id="R" />
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Green:">
        <DxSpinEdit @bind-Value="@green" Id="G" />
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Blue:">
        <DxSpinEdit @bind-Value="@blue" Id="B" />
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Alpha:">
        <DxSpinEdit @bind-Value="@alpha" Id="A" />
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="zIndex:">
        <DxSpinEdit @bind-Value="@zIndex" Id="zIndex" />
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="">
        <DxButton Text="Set" Id="zIndexBtn" />
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Location:">
        <DxTextBox @bind-Text="@location" Id="location" />
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="">
        <DxButton Text="Set" Id="locationBtn" />
    </DxFormLayoutItem>
</DxFormLayout>
<div id="map" class="map" tabindex="0"></div>
<div id="coordinates"></div>
@*<button id="selectbtn">Select</button>
<button id="drawbtn">Draw</button>*@

@code {
    private IJSObjectReference? module;
    private int red = 125;
    private int green = 125;
    private double alpha = 0.5;
    private int blue = 125;
    private int zIndex;
    private string location = string.Empty;
    private static string root = string.Empty;
    //private static IEnumerable<Geom> locations;
    private static ILocationService _locationSvc;


    protected override async Task OnInitializedAsync()
    {
        root = environment.WebRootPath;
        _locationSvc = locationSvc;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (module == null)
            {
                module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/index.bundle.js");
            }
        }
    }

    [JSInvokable]
    public static async Task<bool> SavePolygonAsync(string jsonData)
    {
        try
        {
            IEnumerable<Polygon>? polygons = JsonSerializer.Deserialize<IEnumerable<Polygon>>(jsonData);
            //locations = polygons != null ? polygons : new List<Geom>();
            // Post to API
            if (polygons.Count() > 0)
            {
                foreach (var polygon in polygons)
                {
                    await _locationSvc.SaveLocation(polygon);
                }
            }
            return true;
        }
        catch (Exception)
        {
            return false;
            //throw;
        }

        //IEnumerable<Geom>? polygons = JsonSerializer.Deserialize<IEnumerable<Geom>>(jsonData);
        ////locations = polygons != null ? polygons : new List<Geom>();
        //// Post to API
        //if (polygons.Count() > 0)
        //{
        //    foreach (var polygon in polygons)
        //    {
        //        await _locationSvc.SaveLocation(polygon);
        //    }
        //}                

        //return await Task.FromResult(true);
    }

    [JSInvokable]
    public static async Task<PolygonResponse> GetPolygonsAsync()
    {
        try
        {
            PolygonResponse polygonResponse = await _locationSvc.GetLocationsAsync();
            return polygonResponse;
        }
        catch (Exception)
        {
            
            throw;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module != null)
            await module.DisposeAsync();
    }
}

